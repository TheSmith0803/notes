Now that I know the most basic concepts of HTML and CSS,
I need to expand upon my CSS knowledge by mastering 
positioning and layout.

Changing fonts and colors is a crucial skill, but being 
able to put things exactly where you want them on a 
webpage is even more crucial.

In this lesson I will learn about:
    - The box model
    - How to make sure elements are just the right size
    with 'margin', 'padding', and 'borders'

THE BOX MODEL:
    The first important concept that you need to understand 
    to be successful in CSS is the box model. It isn’t 
    complicated, but skipping over it now will cause you much 
    frustration down the line.

    Every single thing on a webpage is a rectangular box. 
    These boxes can have other boxes in them and can sit 
    alongside one another. You can get a rough idea of how 
    this works by sticking a border on every item on the 
    page like this:

    /*CSS code*/
        
        * {
            border: 2px solid red;
        }

    /*CSS code*/

    'padding' - increases the space 
    between the border of a box and the content of the box.

    'margin' - increases the space between the borders of 
    a box and the borders of adjacent boxes.

    'border' - adds space (even if it’s only a pixel or two) 
    between the margin and the padding.

OUTER DISPLAY TYPE:
    If a box has an outer display type of 'block', then:
        - The box will break onto a new line
        - The width and height properties are respected
        - Padding, margin and border will cause other elements to be
        pushed away from the box
        - If width is not specified, the box will extend in the 
        inline direction to fill the space available in its container.
        In most cases, the box will become as wide as its container, 
        filling up 100% of the space available. 

        Some HTML elements such as <h1> and <p> use 'block' as their
        outer display type by default.

    If a box has an outer display type of 'inline', then:
        - The box will not break onto a new line.
        - The width and height properties will not apply.
        - Vertical padding, margins, and borders will apply but 
        will not cause other inline boxes to move away from 
        the box.
        - Horizontal padding, margins, and borders will apply
        and will cause other inline boxes to move away from the box.

    Some HTML elements such as <a>, <span>, <em> and <strong> use
    inline as their outer display type by default.

INNER DISPLAY TYPE:
    Boxes have an inner display type as well, which dictates
    how elements inside that box are laid out.

    You can change the inner display type for example
    by setting 'display: flex;'. 

    The element will still use the outer display type of
    'block' but this changes the inner display type to 'flex'

    Any direct children of this box will become flex items and 
    behave according to the Flexbox specification.



WHAT IS THE CSS BOX MODEL?????

    The CSS box model as whole applies tp block boxes and 
    defines how the different parts of a box -- margin, border, 
    padding, and content -- work together to create a box that you
    can see on a page. Inline boxes use just some of the behavior
    defined in the box model.

    To add complexity, there is a standard and alternate box model.
    By default, browsers use the standard box model.

    PARTS OF A BOX:

    making up a block box in CSS we have the: -->

        - Content box: The areea where your content is displayed;
        size it using properties like 'inline-size', and 'block-size',
        or 'width' and 'height'.
        - Padding box: The padding sits around the content as a 
        white space; size it using 'padding' and related properties.
        - Border box: The border box wraps the content and any padding;
        size it using 'border' and related properties.
        - Margin box: The margin is the outermost layer, wrapping the 
        content, padding, and border as whitespace between this box 
        and other elements; size it using 'margin' and related properties.

        check this out lol box-model.png (in notes dir)

        THE STANDARD CSS BOX MODEL:

        In the standard box model, if you give a box an 'inline-size'
        and a 'block-size' (or 'width' and a 'height') attributes,
        this defines the inline-size and block-size (width and height 
        in horizontal languages) of the CONTENT BOX. Any padding and 
        border is then added to those dimensions to get the total size 
        taken up by the box.

        THE ALTERNATIVE CSS BOX MODEL:

        In the alternative box model, any width is the width of the
        visible box on the page. The content area width is that width 
        minus the width for the padding and border. No need to add up the
        border and padding to get the real size of the box.

        to turn on the alternatvie model for an elemnt, set 
        'box-sizing: border-box; on it:

        /*CSS code*/
        
        .box {
            box-sizing: border-box;
        }
        
        /*CSS code*/

        if we assume the box has the same CSS as in 
        an example in the standard method:

        /*CSS code*/

        .box {
            width: 350px;
            inline-size: 350px;
            height: 150px;
            block-size: 150px;
            margin: 10px;
            padding: 25px;
            border: 5px solid black;
        }

        /*CSS code*/

        To use the alternative box model for all of your elements 
        (which is a common choice among developers), set the 
        box-sizing property on the <html> element and set all 
        other elements to inherit that value:


        /*CSS code*/

        html {
        box-sizing: border-box;
        }
        *,
        *::before,
        *::after {
        box-sizing: inherit;
        }

        /*CSS code*/

        REMEMBER: When two boxes are next to eachother,
        the margins overlap! The largest margin will be used.
        In the event of a positive margin combined with a 
        negative margin, the amount of the negative margin
        will be added to that of the positive one.
        So subtract the positive version of the negative 
        margin from the other positive margin.

        BORDERS:
        The border is drawn between the margin and the 
        padding of a box. If you are using the standard box model, 
        the size of the border is added to the width and height of
        the content box, If you are using the alternative box model 
        then the size of the border makes the content box smaller as 
        it takes up some of that available height and width of the 
        element box.

        PADDING:
        The padding sits between the border and the content area 
        and i sused to push the content away from the border. Unlike margins,
        you cannot have a negative padding. Any background applied to your
        element wwill display behind the padding.

        The padding property controls the padding on all sides of an 
        elemnt, but you can control them individually, with properties 
        such as: 'padding-top: 20px;'

        THE BOX MODEL AND INLINE BOXES:

        For example, when you create a <span> element within HTML <p>
        elemnt, it gives whatever is located in between the <span>
        tags its very own box. However by default height and width controls
        will be ignored by this box, while the vertical margin, padding, and
        border will be respected. These elements will still not change the 
        relationship of other content to this box though.
        The padding and border will overlap other words near the <span>
        element. Horizontal padding, margins, and borders move other 
        content away from the box.

        Using 'display: inline-block;':

        display: inline-block is a special value of display, 
        which provides a middle ground between inline and block. 
        Use it if you do not want an item to break onto a new line, 
        but do want it to respect width and height and avoid the 
        overlapping discussed above.

        an elemnt with display: inline-block; does a subset of things
        we already know about:

        - The width and height will be respected.
        - padding, margin, and border will cause other elements 
        to be pushed away from the box!!!!!!

        It does not, however, break onto a new line, and will only become 
        larger than its content if you explicitly add 
        'width' and 'height' properties.

        ENDING QUESTIONS:

From inside to outside, what is the order of box-model properties?
    content, padding, border, margin

What does the box-sizing CSS property do?
    Lets you specify how the dimensions of 
    a box are calculated. 'content-box' (default)
    will calculate width and height based upon the 
    content of the element.

    'border-box' will make the defined 'width' and 
    'height' the actual width and height defined,
    and will put all padding and border within those
    defined dimensions.

What is the difference between the standard and alternative box model?
    pretty much answered in the last question. content-box 
    or border-box

Would you use margin or padding to create more space between 2 elements?
    margin

Would you use margin or padding to create more space between the 
contents of an element and its border?
    padding

Would you use margin or padding if you wanted two elements to 
overlap each other?
    margin

        










