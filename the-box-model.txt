Now that I know the most basic concepts of HTML and CSS,
I need to expand upon my CSS knowledge by mastering 
positioning and layout.

Changing fonts and colors is a crucial skill, but being 
able to put things exactly where you want them on a 
webpage is even more crucial.

In this lesson I will learn about:
    - The box model
    - How to make sure elements are just the right size
    with 'margin', 'padding', and 'borders'

THE BOX MODEL:
    The first important concept that you need to understand 
    to be successful in CSS is the box model. It isn’t 
    complicated, but skipping over it now will cause you much 
    frustration down the line.

    Every single thing on a webpage is a rectangular box. 
    These boxes can have other boxes in them and can sit 
    alongside one another. You can get a rough idea of how 
    this works by sticking a border on every item on the 
    page like this:

    /*CSS code*/
        
        * {
            border: 2px solid red;
        }

    /*CSS code*/

    'padding' - increases the space 
    between the border of a box and the content of the box.

    'margin' - increases the space between the borders of 
    a box and the borders of adjacent boxes.

    'border' - adds space (even if it’s only a pixel or two) 
    between the margin and the padding.

OUTER DISPLAY TYPE:
    If a box has an outer display type of 'block', then:
        - The box will break onto a new line
        - The width and height properties are respected
        - Padding, margin and border will cause other elements to be
        pushed away from the box
        - If width is not specified, the box will extend in the 
        inline direction to fill the space available in its container.
        In most cases, the box will become as wide as its container, 
        filling up 100% of the space available. 

        Some HTML elements such as <h1> and <p> use 'block' as their
        outer display type by default.

    If a box has an outer display type of 'inline', then:
        - The box will not break onto a new line.
        - The width and height properties will not apply.
        - Vertical padding, margins, and borders will apply but 
        will not cause other inline boxes to move away from 
        the box.
        - Horizontal padding, margins, and borders will apply
        and will cause other inline boxes to move away from the box.

    Some HTML elements such as <a>, <span>, <em> and <strong> use
    inline as their outer display type by default.

INNER DISPLAY TYPE:
    Boxes have an inner display type as well, which dictates
    how elements inside that box are laid out.

    You can change the inner display type for example
    by setting 'display: flex;'. 

    The element will still use the outer display type of
    'block' but this changes the inner display type to 'flex'

    Any direct children of this box will become flex items and 
    behave according to the Flexbox specification.




