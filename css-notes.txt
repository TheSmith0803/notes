font-family: decides the font style
    if the browser doesnt support the font selected
    it will select the next available font 
    supported by that browser.

font-size: 
    pretty self explanitory

font-weight:
    affects the boldness of text. the value can be
    a keyword such as - font-weight: bold, and also 
    a number between 1-1000, ex. font-weight: 700
    (700 = the equivilant of bold font)
    Usually numeric value will be in increments of 100
    up to 900, though this will depend upon the type
    of font being used.

text-align:
    will align text horizontally within an element.
    Keywords may be used such as -- text-align: center

Image height and width:
    if you just simply want to adjust size of an Image 
    in CSS, you must assign the height to auto, and then 
    define the size of the image with the width factor.

    HOWEVER, it is smart to put in the height element 
    regardless, because if it is set to auto, and it takes 
    longer to load than the rest of the page, then it will cause a 
    drastic shift of the other page contents when it does 
    end up loading in

    explicity statin a height and width makes it so the 
    space will already be reserved when the page loads.

The Cascade of CSS:
    The cascade is what determines which rules actually get applied 
    to our HTML. There are different factors that the cascade uses 
    to determine this, three of which we’ll go over to hopefully 
    help you avoid (as many of) those frustrating 
    “I hate CSS” moments.

Spececifity:
    Essentially, you can think of CSS rules in terms 
    of a point system (sort of):
        -ID selector: 100
        -Class selector, attribute selector, and pseudo-class selector: 10
        -Type selector and pseudo-element selector: 1
        -Universal selector, combinators, and negation pseudo-class: 0 
             (does not contribute to specificity)^^

Inheritance:
    Refers to certain CSS properties that, when applied to an element, 
    are inherited by that element’s descendants, even if we don’t 
    explicitly write a rule for those descendants.

    The exception to this is when an element is directly targeted, 
    as this always beats Inheritance.

Rule order:
    If a set of rules have equal specificity, such as two class rules,
    then CSS will simply apply the last stated rule

Adding CSS to HTML  
    External CSS is the most common method you will come across, 
    and it involves creating a separate file for the CSS and linking 
    it inside of an HTML’s opening and closing <head> tags with a 
    self-closing <link> element

    example:
        <!-- index.html -->

        <head>
            <link rel="stylesheet" href="styles.css">
        </head>

INTERNAL CSS:
    Internal CSS (or embedded CSS) adding the CSS within the 
    HTML file itself instead of creating a completely 
    separate file.

    To do this you need to place a '<style>' element 
    with opening and closing tags inside the '<head>'
    tags of your HTML file.

    And since the style tags are being placed directly
    in the head tags, we no longer need a link element

    you can then write your CSS code within your HTML
    document within the '<style>' tags.

INLINE CSS:
    Inline CSS makes it possible to add styles directly 
    to HTML elements, though this method isn’t as 
    recommended

    for example, consider this code:

    <body>
        <div style="color: white; background-color: black;">...</div>
    </body>

    note that no selectors are used here, because the 
    styles are being added directly to the opening tag
    ( <div> )

    If you need to add a unique style for a single element, 
    this method can work just fine. Generally, though, this 
    isn’t exactly a recommended way for adding CSS to HTML 
    for a few reasons:

        - It can quickly become pretty messy once you start adding 
        a lot of declarations to a single element, causing your 
        HTML file to become unnecessarily bloated.
        
        - If you want many elements to have the same style, you 
        would have to copy + paste the same style to each 
        individual element, causing lots of unnecessary repetition 
        and more bloat.
        
        - Any inline CSS will override the other two methods, 
        which can cause unexpected results. (While we won’t 
        dive into it here, this can actually be taken advantage of).



BIG BOI STUFFFFF












